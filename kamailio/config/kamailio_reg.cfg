# ----- params -----
listen=udp:172.16.36.150:5060

children=4

use_dns_cache=off
dns_try_naptr=no
server_signature=no
auto_aliases=no

debug=0
log_stderror=no
log_facility=LOG_LOCAL0

# ----- modules -----
loadmodule "db_text"
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "pv.so"
loadmodule "textops.so"
loadmodule "xlog.so"
loadmodule "usrloc.so"
loadmodule "auth_db"
loadmodule "auth"
loadmodule "registrar.so"

# ----- db text -----
modparam("db_text", "db_mode", 1)
modparam("db_text", "emptystring", 1)
modparam("db_text", "file_buffer_size", 16384)

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 30000)
modparam("tm", "fr_inv_timer", 120000)

# ----- usrloc params -----
modparam("usrloc", "db_mode", 0)

# ----- auth params -----
modparam("auth", "nonce_count", 1)
modparam("auth", "qop", "auth")
modparam("auth", "nonce_expire", 60)
modparam("auth", "nc_array_order", 20)
modparam("auth", "nonce_auth_max_drift", 2)
modparam("auth", "auth_checks_register", 11)
modparam("auth", "auth_checks_no_dlg", 9)
modparam("auth", "auth_checks_in_dlg", 15)

# ----- auth_db params -----
modparam("auth_db", "version_table", 0)
modparam("auth_db", "db_url", "text:///etc/kamailio/")
modparam("auth_db", "calculate_ha1", 1)
modparam("auth_db", "use_domain", 0)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "user_column", "user")
modparam("auth_db", "domain_column", "domain")
modparam("auth_db", "load_credentials", "")
#modparam("auth_db", "use_domain", 1)

# ----- registrar params -----
modparam("registrar", "received_avp", "$avp(RECEIVED)")

# request main
request_route {
	# is REGISTER
	if (is_method("REGISTER")) {
		# auth
		route(AUTH);

		# register
		route(REGISTER);
	} else {
		# error
		xlog("L_ERR", "Method not supported: $rm\n");

		# reply
		send_reply("405", "Method not supported");
	}
}

# request auth
route[AUTH] {
	# auth passwd
	$avp(password) = "Password";

	# auth check
	if (!pv_auth_check("$fd", "$avp(password)", "0", "1")) {
		auth_challenge("$fd", "1");
		exit;
	}

	# auth remove header
	if (!is_method("REGISTER|PUBLISH")) {
		consume_credentials();
	}
}

# request register
route[REGISTER] {
	if (!save("location", "0x05")) {
		# err
		send_reply("503", "Service Unavailable");
	} else {
		# ok
		#send_reply("200", "OK");
		;
	}
}
